Doc Python
## import packages 

#%%
import json
import pandas as pd
import os
import glob
import re
#import geopandas as gpd
import geopy
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter
import matplotlib.pyplot as plt
import plotly.express as px
import tqdm
from tqdm._tqdm_notebook import tqdm_notebook
## visualisation des données 

    

## Nous allons importer les données 

# %%
import json
import pandas as pd 
import glob

list_files = glob.glob("*.json")
list_files

# Nous allons concatener tous les fichiers dans un seul
# dataframe pour faire la comparaison 
#%%
import json
import pandas as pd
data = pd.concat([pd.read_json(i, lines=True) for i in list_files])
data.head()


# On visualise les informations 
# qu'aportent nos données
#%%
data.info()

## Création variables  : date, latitude, longitude
# la variable date est fait de façon à avoir les dates par jour de chaqu'un des 
# autres varariables surnommés altitude et longitude 
# Fonction pour récuperer le i
# Cette fonction a pour but de récupérer le nombre de par jour des, altitude 
# longitude 
#%%
import re
def get_number(text,i):
  num = re.findall(r'\d*\.\d*',text)
  return num[i]

data['date'] = pd.to_datetime(data['dateObserved'].str[:10], format='%Y-%m-%d')
data['longitude']=data['location'].astype('str').apply(lambda x: get_number(x,0)).astype('float')
data['latitude']=data['location'].astype('str').apply(lambda x: get_number(x,1)).astype('float')

data[['date', 'latitude', 'longitude']].head()

# Nous allons dans cette partie récuper le nombre de vélo par jour
# %%
## NB Velos par jour : 
data_jour = data[['date', 'id']].groupby("date").agg({'id' : 'count'})
data_jour.head()
data_jour.plot()
# %%
import matplotlib.pyplot as plt
ax = plt.gca()
ax = plt.gca()
data_jour.plot(kind='line',ax=ax, color = 'blue',)
plt.show()
## Boxplot
data_jour.boxplot()
# %%
px.scatter_mapbox(data, lat='latitude', lon='longitude', zoom=15)



# %%
## Recuperer les addresses associées aux coordonnées lat, lon : 
data.to_excel('all_data.xlsx')
# %%
df = pd.read_excel('all_data.xlsx')

# Mettre les variables en float 

df['Latitude'] = df['latitude'].astype(float)
df['Longitude'] = df['longitude'].astype(float)
map_df = df[['Latitude', 'Longitude', 'date', 'id']]

list_dates = map_df['date'].astype('str').unique().tolist()
print(len(list_dates))
list_dates[-3:]
# %%
import folium
## Fonction pour afficher le nombre de velos par site pour une date données

## date doit etre une liste
def plot_nb_velo_date(data , date):
    print("Date entre ", min(date) ," et ", max(date))
    df_count = data[data['date'].astype('str').isin(date) ].groupby(['Latitude', 'Longitude']).agg({'id': 'count'}).reset_index()
  
  ## Preparer carte sur Montpellier
  #  
    map_montpellier = folium.Map(location=[43.610769, 3.876716],
                    zoom_start = 14)
  
  ## Rajouter points avec les vélos + nb velos
    for l,L,nb in zip(df_count['Latitude'],df_count['Longitude'], df_count['id'] ) :
        folium.Marker([float(l), float(L)], 
              popup= str(nb),
              icon=folium.Icon(color='blue',icon='bicycle', prefix='fa')
             ).add_to(map_montpellier)
        folium.Marker(
        [float(l) , float(L) ],
        icon=folium.DivIcon(
        icon_size=(150,36),
        icon_anchor=(0,0),
        html='<div style="font-size: 15pt">%s</div>' % nb,
        )
        ).add_to(map_montpellier)

    return {"map" : map_montpellier}

#%%
map_df.groupby(['Latitude', 'Longitude', 'date']).agg({'id': 'count'}).reset_index().sort_values('id', ascending =False)

#%%
## Afficher graphique avec les 300 premieres dates
plot_nb_velo_date(map_df, list_dates[:300])['map']
# %%
